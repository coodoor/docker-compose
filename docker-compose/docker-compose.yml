version: "2"
networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.18.0.0/24

services:
  #-------------------------mycat-------------------------#
  mycat:
    image: mycat:v0.1
    build:
      context: ./mycat
      dockerfile: Dockerfile
    container_name: mycat
    restart: always
    volumes:
      - ./mycat/conf/:/mycat/conf/:ro
      - ./mycat/log/:/mycat/logs/:rw
      - ./mycat/hosts:/etc/hosts:ro
    ports:
      - "8066:8066"
      - "9066:9066"
    links:
      - mysql_master
      - mysql_slave_1
    hostname: mycat
    networks:
      backend:
        ipv4_address: 192.18.0.2

  #-------------------------mysql_master-------------------------#
  mysql_master:
    image: mysql:v0.1
    build:
      context: ./mysql/master
      dockerfile: Dockerfile
    restart: always
    environment:
      - TZ=Asia/Shanghai         # 设置容器时区与宿主机保持一致
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    ports:
      - 3306:3306
    volumes:
      - ./mysql/master/data:/var/lib/mysql
      - ./mysql/master/mysql.conf.d/my.cnf:/etc/my.cnf
    hostname: m1
    networks:
      backend:
        ipv4_address: 192.18.0.3
    container_name: mysql_master

  #-------------------------mysql_slave_1-------------------------#
  mysql_slave_1:
    image: mysql:v0.1
    build:
      context: ./mysql/slave1
      dockerfile: Dockerfile
    restart: always
    environment:
      - TZ=Asia/Shanghai         # 设置容器时区与宿主机保持一致
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    ports:
      - 3307:3306
    volumes:
      - ./mysql/slave1/data:/var/lib/mysql
      - ./mysql/slave1/mysql.conf.d/my.cnf:/etc/my.cnf
    hostname: s1
    networks:
      backend:
        ipv4_address: 192.18.0.4
    container_name: mysql_slave_1
    links:
      - mysql_master

#  #-------------------------postgres-------------------------#
#  postgres:
#    image: postgres:v0.1
#    build:
#      context: ./postgres
#      dockerfile: Dockerfile
#    restart: always
#    privileged: true  #解决权限
#    environment:
#      #POSTGRES_PASSWORD: ${pwd}  #密码
#      PGDATA: /var/lib/postgresql/data/pgdata #数据存储文件夹
#    ports:
#      - 5432:5432  #映射端口号
#    volumes:
#      - ./postgres/data:/var/lib/postgresql/data/pgdata #将数据映射到对应的路径
#    networks:
#      - backend
#    container_name: postgres

#  #-------------------------redis-------------------------#
#  redis:
#    image: redis:v0.1
#    build:
#      context: ./redis
#      dockerfile: Dockerfile
#    restart: always
#    ports:
#      - "6379:6379"
#    volumes:
#      - ./redis/conf/redis.conf:/usr/local/etc/redis.conf
#      - ./redis/data/:/data/
##      - ./redis/log/redis.log:/var/log/redis/redis.log:rw
#    networks:
#      backend:
#        ipv4_address: 192.18.0.20
#    container_name: redis
#
#  #-------------------------nginx-------------------------#
#  nginx:
#    image: nginx:v0.1
#    build:
#      context: ./nginx
#      dockerfile: Dockerfile
#    container_name: nginx
#    restart: always
#    ports:
#      - 80:80
#      - 443:443
#      - 5050:5050
#      - 4040:4040
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/conf.d/test.conf:/etc/nginx/conf.d/test.conf:ro
#      - ./nginx/logs/:/var/log/nginx/
#      - ./nginx/webapps/:/opt/webapps/
#    networks:
#      backend:
#        ipv4_address: 192.18.0.40
#    links:
#      - tomcat1:t01                                          #连接 tomcat镜像
#      - tomcat2:t02                                          #连接 tomcat镜像
#
#  #-------------------------tomcat-------------------------#
#  tomcat1:
#    image: tomcat1:v0.1
#    build:
#      context: ./tomcat
#      dockerfile: Dockerfile
#    container_name: tomcat1
#    restart: always
#    ports:
#      - 8082:8080
##      - 8009:8009
#    volumes:
#      - ./tomcat/webapps/:/usr/local/tomcat/webapps/                #映射一个web服务
#      - ./tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml  #映射 tomcat的配置文件到容器里
#      - ./tomcat/logs/:/usr/local/tomcat/logs/
#    networks:
#      backend:
#        ipv4_address: 192.18.0.41
#  #-------------------------tomcat-------------------------#
#  tomcat2:
#    image: tomcat2:v0.1
#    build:
#      context: ./tomcat
#      dockerfile: Dockerfile
#    container_name: tomcat2
#    restart: always
#    ports:
#      - 8083:8080
##      - 8010:8009
#    volumes:
#      - ./tomcat/webapps/:/usr/local/tomcat/webapps/                #映射一个web服务
#      - ./tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml  #映射 tomcat的配置文件到容器里
#      - ./tomcat/logs/:/usr/local/tomcat/logs/
#    networks:
#      backend:
#        ipv4_address: 192.18.0.42

  #-------------------------vtp-------------------------#
#  paascloud-provider-vtp:
#    image: provider-vtp:v0.1
#    build:
#      context: ./paascloud-provider-vtp
#      dockerfile: Dockerfile
#    command:
#      --privileged=true
#    restart: always
#    ports:
#      - "8089:8089"
#    volumes:
#      - ./paascloud-provider-vtp/logs/:/logs/:rw
#    networks:
#      backend:
#        ipv4_address: 192.18.0.60
#    container_name: paascloud-provider-vtp